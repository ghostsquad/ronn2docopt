// Code generated by go-bindata. DO NOT EDIT.
// sources:
// examples/basic/docs/docopt.txt

package lib

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  fileInfoEx
}

type fileInfoEx interface {
	os.FileInfo
	MD5Checksum() string
}

type bindataFileInfo struct {
	name        string
	size        int64
	mode        os.FileMode
	modTime     time.Time
	md5checksum string
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) MD5Checksum() string {
	return fi.md5checksum
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _docsDocoptTxt = []byte(
	"\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\x6c\x51\xc1\x6e\xc3\x20\x0c\xbd\xe7\x2b\x7c\xdc\xa4\xba\xb7\x5d\x26\x92" +
	"\x5f\xd8\x69\xda\xa1\xaa\x26\x4b\x31\x09\x1a\x18\x04\x34\x5d\xa7\x7e\xfc\xe4\xb0\x69\x59\xd5\x0b\xf8\xf9\x3d\x3f" +
	"\x78\xf0\x5a\x68\xe2\xe7\x0e\x40\x68\x21\xff\x6e\xa9\x32\x94\xd9\x25\x10\x3e\x83\x11\x0a\x3c\xec\xf7\xfb\x3b\x7c" +
	"\xe3\x20\xc4\x85\xc1\x7c\x0e\x60\x2e\x03\x1c\x10\x4b\x62\x1e\x7b\xf3\x21\xc3\xf1\xce\x50\x99\x63\xac\x3f\xf2\xff" +
	"\x74\x70\xc2\xf0\x50\xb8\x5e\x33\xab\xe7\xe3\xd6\x34\xc4\x98\x79\xbc\x22\x8e\xd9\xd9\xea\x64\xba\xf1\xc6\x19\xae" +
	"\x80\x38\xb3\x4f\x37\x04\x2e\x9c\x8b\x8b\xd2\x75\x2f\xa9\xba\x28\x45\xa3\xe2\xbc\xfb\x53\xe3\xb2\xdb\xc8\x00\x36" +
	"\x09\x14\x61\x72\x89\xb5\xc8\x2a\xcb\xd1\x5a\x05\x4f\xab\x41\x0d\x5e\x81\x55\x60\x33\x4d\x81\xa5\xae\x33\x81\xe4" +
	"\x44\xbe\x37\x6d\x6f\x3e\x31\x4f\x24\xee\x8b\xf4\x16\x7d\x7b\xbc\xb5\x3f\x52\xe5\xde\xe8\xda\x70\xa9\x17\xcf\xbd" +
	"\x09\x71\x3c\x79\x1e\x0e\xbb\xdf\xea\xd8\xbe\x01\xcf\x7a\xda\x99\xb2\x38\x99\x8a\x36\xde\xba\xef\x00\x00\x00\xff" +
	"\xff\xbc\xa6\x8f\xa9\xc4\x01\x00\x00")

func docsDocoptTxtBytes() ([]byte, error) {
	return bindataRead(
		_docsDocoptTxt,
		"docs/docopt.txt",
	)
}

func docsDocoptTxt() (*asset, error) {
	bytes, err := docsDocoptTxtBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "docs/docopt.txt", size: 452, md5checksum: "", mode: os.FileMode(420), modTime: time.Unix(1510613103, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
// nolint: deadcode
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
}

// AssetNames returns the names of the assets.
// nolint: deadcode
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"docs/docopt.txt": docsDocoptTxt,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
			}
		}
	}
	if node.Func != nil {
		return nil, &os.PathError{Op: "open", Path: name, Err: os.ErrNotExist}
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"docs": {nil, map[string]*bintree{
		"docopt.txt": {docsDocoptTxt, map[string]*bintree{}},
	}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	return os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
